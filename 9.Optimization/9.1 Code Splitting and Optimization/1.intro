
🛒 Real-Life Website Use Case: An E-Commerce Website Like Amazon
Scenario:
Imagine you are building an E-Commerce Website like Amazon. This website has:
✅ A Homepage (Displays featured products)
✅ A Product Details Page (Shows a single product)
✅ A Cart Page (Shows selected items)
✅ A Checkout Page (Processes payment)

We want to optimize the website's performance so that:
🔹 The homepage loads quickly without unnecessary data.
🔹 The product page loads only when a user clicks a product.
🔹 Images load only when they appear on the screen (Lazy Loading).
🔹 Heavy JavaScript loads only when needed.
🔹 API calls fetch data only when required.









1️⃣ Code Splitting (Webpack / Vite)
💡 Problem: The website’s JavaScript bundle is huge, making the website slow to load.

✅ Solution: Instead of sending one big file, split the JavaScript into smaller files (chunks).

What Happens Behind the Scenes?
When Webpack/Vite builds the app, it detects modules that can be split.
It generates separate files (home.js, product.js, cart.js).
The browser downloads only the required file for each page.
Example (React with Webpack/Vite)
javascript
Copy
Edit
import { lazy, Suspense } from 'react';
const ProductPage = lazy(() => import('./ProductPage'));

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <ProductPage />
    </Suspense>
  );
}
🔹 Result: When a user visits /product/123, only product.js is loaded, saving bandwidth.












2️⃣ Lazy Loading (Images & Videos)
💡 Problem: The website has hundreds of images, making it slow.

✅ Solution: Load images only when they appear on the screen.

What Happens Behind the Scenes?
The website initially loads only placeholders (gray boxes).
When a user scrolls down, JavaScript detects visible images using the Intersection Observer API.
The actual image replaces the placeholder dynamically.
Example (Lazy Loading Product Images)
javascript
Copy
Edit
const images = document.querySelectorAll('.lazy-load');

const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      entry.target.src = entry.target.dataset.src; 
      observer.unobserve(entry.target);
    }
  });
});

images.forEach(img => observer.observe(img));
🔹 Result: Only images visible on the screen load, reducing initial load time.










3️⃣ Dynamic Imports (import())
💡 Problem: The website uses a heavy PDF library for generating invoices, but it's loaded even when not needed.

✅ Solution: Load the PDF library only when the user clicks "Download Invoice".

What Happens Behind the Scenes?
When the page loads, the PDF library is not included in the JavaScript bundle.
When the user clicks "Download Invoice", JavaScript fetches the library dynamically.
The user sees a loading spinner, and once loaded, the invoice is generated.
Example (On-Demand Loading of a PDF Library)
javascript
Copy
Edit
document.getElementById('download-invoice').addEventListener('click', async () => {
  const pdfLib = await import('pdf-lib'); // Load only when needed
  const doc = pdfLib.PDFDocument.create();
  console.log("PDF Library Loaded", doc);
});
🔹 Result: The invoice feature doesn’t slow down the website for users who don’t need it.









4️⃣ Route-Based Code Splitting (React + React Router)
💡 Problem: The website loads all pages at once, making it slow.

✅ Solution: Load only the current page, and fetch other pages when the user navigates.

What Happens Behind the Scenes?
When the user opens the homepage, only home.js loads.
When they click a product, the browser fetches product.js dynamically.
The user sees a loading spinner while the product page loads.
Example (React Lazy Loading Pages)
javascript
Copy
Edit
import { lazy, Suspense } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';

const Home = lazy(() => import('./Home'));
const ProductDetails = lazy(() => import('./ProductDetails'));

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Suspense fallback={<div>Loading...</div>}><Home /></Suspense>} />
        <Route path="/product/:id" element={<Suspense fallback={<div>Loading...</div>}><ProductDetails /></Suspense>} />
      </Routes>
    </Router>
  );
}
🔹 Result: Only necessary pages load, improving website speed.





5️⃣ On-Demand API Data Loading
💡 Problem: The website fetches all products at once, making API calls slow and expensive.

✅ Solution: Fetch only what’s needed, using pagination & infinite scroll.

What Happens Behind the Scenes?
The homepage fetches only 10 products initially.
When the user scrolls down, JavaScript detects the bottom and fetches 10 more products.
Example (Loading More Products on Scroll)
javascript
Copy
Edit
let page = 1;
async function loadProducts() {
  const response = await fetch(`/api/products?page=${page}`);
  const data = await response.json();
  renderProducts(data);
  page++;
}

window.addEventListener('scroll', () => {
  if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
    loadProducts();
  }
});
🔹 Result: The API fetches only necessary data, improving server performance.





6️⃣ Preloading & Prefetching
💡 Problem: When the user clicks a product, the page takes time to load.

✅ Solution: Prefetch product pages in the background while the user is browsing.

What Happens Behind the Scenes?
The browser detects that the user is hovering over a product.
It preloads the product page in the background.
When the user clicks, the page loads instantly.
Example (Prefetching Next Page)
html
Copy
Edit
<link rel="prefetch" href="/product/123">
🔹 Result: The user experiences instant navigation.










7️⃣ Final Optimization (Tree Shaking & Minification)
💡 Problem: The website contains unused JavaScript, making the bundle larger than necessary.

✅ Solution: Remove unused code (tree shaking) and compress files using Gzip/Brotli.

What Happens Behind the Scenes?
Webpack removes unused imports.
The final JavaScript gets minified.
The server compresses files before sending them to users.
Example (Webpack Tree Shaking & Minification)
javascript
Copy
Edit
module.exports = {
  optimization: {
    minimize: true, // Minify JS
    splitChunks: { chunks: 'all' }, // Code Splitting
  },
};
🔹 Result: The website loads fast, even on slow networks.




P1
