What is the Single Responsibility Principle (SRP)?
                        The Single Responsibility Principle (SRP) is one of the core principles of software design, specifically a part of the SOLID principles. 
                        It states:
                            "A class or module should have only one reason to change."

                            This means that each class, module, or function in a program should be responsible for a single piece of functionality. A responsibility, in this context, is a single, well-defined purpose or task.






Main Purpose of SRP
                To make the code more modular, easier to understand, maintain, and test.
                
                To reduce coupling between components, making them more independent and reusable.
                
                To isolate changes so that modifying one functionality doesn’t unintentionally affect others.




What Problem Does SRP Solve?
Before SRP, classes or modules often tried to do too many things at once, leading to:
                        1.High Complexity: A class handling multiple responsibilities becomes hard to understand and debug.
                        
                        2.Poor Maintainability: Changes to one responsibility might unintentionally break others.
                        
                        3.Tightly Coupled Code: Dependencies between unrelated responsibilities make it harder to reuse or modify code.
                        
                        4.Testing Challenges: Testing becomes cumbersome when a single class is responsible for multiple tasks.




How Were Things Before SRP?
In traditional programming, it was common for a single class or function to:
                            Handle business logic, data access, and user interface operations simultaneously.
                           
                            Grow into a "God Object", which is a large class responsible for too many unrelated tasks.
        
        Such designs made systems fragile, difficult to scale, and error-prone. SRP was introduced to address these issues and promote modular and clean architecture






Why Is It Called the Single Responsibility Principle?
        *"Single Responsibility" emphasizes that each component should focus on one and only one responsibility.
        
        *The term "responsibility" refers to a reason to change—if you find a class changing for multiple reasons, it likely violates SRP.



Relation to the General World
SRP aligns closely with how we manage tasks in real life:
                                                        Imagine a chef in a restaurant. If the chef tries to handle cooking, cleaning, serving, and accounting simultaneously, they become inefficient and prone to mistakes. Instead, by assigning specific roles to a cook, a cleaner, a server, and an accountant, the system works more smoothly.
                In the same way, SRP ensures each component in software focuses on a specific task.




**************************************
How SRP Is Used in Software Development
                    1.Modular Code: Breaking down large classes or modules into smaller, focused ones.
                    
                    2.Encapsulation: Each class hides its implementation details and focuses on a single responsibility.
                    
                    3.Clear Boundaries: Define clear roles and responsibilities for every component.





Examples of SRP
    Example 1: Without SRP
            class Report:
                def generate_report(self, data):
                    # Business logic to generate a report
                    print("Generating report...")
                
                def save_to_file(self, filename):
                    # Logic to save the report to a file
                    print(f"Saving report to {filename}")
                
                def send_email(self, email):
                    # Logic to send the report via email
                    print(f"Sending report to {email}")
        

    Problem: This class is responsible for:
                        1.Generating the report.
                        
                        2.Saving it to a file.
                        
                        3.Sending it via email.
            Any change to one responsibility could affect the others.


    With SRP:
            class ReportGenerator:
                def generate(self, data):
                    print("Generating report...")
                
            class FileSaver:
                def save(self, report, filename):
                    print(f"Saving report to {filename}")
                    
            class EmailSender:
                def send(self, report, email):
                    print(f"Sending report to {email}")


Now each class handles a single responsibility:
            1.ReportGenerator: Generates the report.
            
            2.FileSaver: Saves the report to a file.
           
            3.EmailSender: Sends the report via email.















Real-World Applications
                1.E-commerce Systems:
                                    ProductService: Handles product-related logic.
                                    OrderService: Manages orders.
                                    PaymentService: Handles payments.
                                    Each service is independent and focuses on its specific responsibility.
                
                2.Microservices Architecture:
                                            Each microservice is designed around a single responsibility, e.g., an authentication service, a user profile service, and an inventory service.