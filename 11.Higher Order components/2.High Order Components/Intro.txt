Higher-Order Components (HOC) in React
    *What Are Higher-Order Components (HOC)?
        A Higher-Order Component (HOC) is a function that takes a component as input and returns a new enhanced component.

        It allows you to reuse component logic and is a pattern used for code reusability in React.



*Why Are They Called "Higher-Order" Components?
    They are called higher-order because they operate on components, just like higher-order functions (HOFs) operate on functions in JavaScript.

    Instead of modifying a component directly, HOCs wrap it and enhance its behavior.




*Why Were Higher-Order Components Introduced in React?
        Problem: Code Duplication in Multiple Components
        
        When multiple components need the same logic (e.g., authentication checks, fetching data, logging), we end up copy-pasting the same code across different components.

    HOCs solve this by abstracting common logic into a single function, keeping our code clean, reusable, and maintainable.




***How Do Higher-Order Components Work?
    HOCs are simply functions that take a component as an argument and return a new enhanced component.


**Basic Syntax of a HOC


            const withHOC = (WrappedComponent) => {
            return (props) => {
                return <WrappedComponent {...props} />;
            };
        };


    üîπ Here, withHOC is a function that takes WrappedComponent as input and returns a new component.    






*Basic Example to Understand HOC Easily
        Scenario: Adding a Title to Multiple Components
        We have two components Profile and Dashboard, and we want to add a common title to both without repeating code.

            Without HOC (Code Duplication)  

                            const Profile = () => {
                                return (
                                    <div>
                                        <h1>Profile Page</h1>
                                        <p>Welcome to your profile!</p>
                                    </div>
                                );
                            };


                            const Dashboard = () => {
                                return (
                                    <div>
                                        <h1>Dashboard</h1>
                                        <p>Here are your stats!</p>
                                    </div>
                                );
                            };

                ‚ùå Problem: Both components have <h1> headers, leading to code duplication.





            With HOC (Code Reusability)

                        We create a HOC called withTitle to add the title dynamically.
                            
                            Step 1: Create the Higher-Order Component

                                    const withTitle = (WrappedComponent, title) => {
                                        return (props) => (
                                            <div>
                                                <h1>{title}</h1>
                                                <WrappedComponent {...props} />
                                            </div>
                                        );
                                    };


                            üîπ withTitle takes a component and a title as arguments and returns a new component with a title.




                            Step 2: Use the HOC to Wrap Components

                                const ProfileWithTitle = withTitle(Profile, "Profile Page");
                                const DashboardWithTitle = withTitle(Dashboard, "Dashboard");

                            
                            
                            *// Now we use these enhanced components
                            function App() {
                                return (
                                    <div>
                                        <ProfileWithTitle />
                                        <DashboardWithTitle />
                                    </div>
                                );
                            }

                            export default App;


                ‚úÖ Now, we have removed code duplication!
                ‚úÖ We can reuse withTitle for any component that needs a title!









Another Example: HOC for User Authentication
        
        Let's say we want to restrict access to some pages unless the user is logged in.

                Step 1: Create the HOC (withAuth)

                            const withAuth = (WrappedComponent) => {
                                return (props) => {
                                    const isLoggedIn = true; // Simulating login check

                                    if (!isLoggedIn) {
                                        return <h2>Please Log in to continue.</h2>;
                                    }

                                    return <WrappedComponent {...props} />;
                                };
                            };
                    

                üîπ If the user is not logged in, we show a login message instead of the original component.
            


                Step 2: Wrap Components with withAuth

                            const Dashboard = () => <h2>Welcome to the Dashboard!</h2>;

                            const ProtectedDashboard = withAuth(Dashboard);



                            function App() {
                                return (
                                    <div>
                                        <ProtectedDashboard />
                                    </div>
                                );
                            }

                            export default App;

                ‚úÖ Now, Dashboard requires authentication before rendering!
            





Key Benefits of Higher-Order Components
        
        1.Code Reusability ‚Üí Write common logic once and use it across multiple components.
        
        2.Separation of Concerns ‚Üí Keeps components focused on rendering, while HOCs handle logic.

        3.Better Maintainability ‚Üí Changes to common logic need to be made only in one place.

        4.Enhances Components Dynamically ‚Üí Add extra functionality without modifying the original component.



Are Higher-Order Components Still Used Today?
            Although HOCs are powerful, React Hooks (like useEffect and useContext) have reduced their usage. However, HOCs are still useful in some cases, especially when working with third-party libraries (e.g., Redux, Apollo, authentication providers, etc.).


Final Thoughts
            Higher-Order Components (HOCs) are functions that take a component and return an enhanced component.
            
            They solve code duplication problems and promote reusability.
            
            They work in React because React treats components as functions, making them first-class citizens.
            
            Common use cases: Authentication, data fetching, logging, permissions.









