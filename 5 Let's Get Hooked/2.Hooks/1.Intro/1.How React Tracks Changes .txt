Before Get into Hooks, Lets Discuss About Two tings :
            1.Data Layer 
            2.UI Layer 
        

Data Layer Provides the Data for the UI Layer. EX: API ,User Interactions ...

UI Layer Render the Data that comes from the Data Layer. it has to be transfomred it self acc to Data comming from the Data Layer and User Interactions.

*React will take care of Rendering .





Heading:
    *------------->"It Renders UI by keep track of Props and States in the Functional Componet  NOT 'Internal Vabiales used in the Componets'"<---------------

*Lets Walk deep into about this so that you will understand what is mean by "STATE" React.

    In Provieous sessions we worked on real world data , that is taken from swiggy API. 
    It has a data of diffrent Resturants . 
    Now we can add a Button in body to Filter the Top Rated Resturants among them and Render them on UI.

    const  Body= ()=>{
    let ResturantList=[{......}] 

        return (
        <div className="body">

            <div className="filter-btn">
                <button 
                    className="filter-btn" 
                    onClick={() => {
                        ResturantList =ResturantList.filter(
                            (res) => res.card.card.info.avgRating > 4.3);
                        console.log("Filtered Top Rated Restaurants:", ResturantList);
                    }}>Top Rated
                </button>
            </div>

            {console.log("Top Resturants:",ResturantList)}                                                                 //even though ResturantList got updated it logs all the Restaurants present in the list
            
            <div className="rest-container">
                  {ResturantList.map((resturant) => (<ResturantCard  key ={resturant.card.card.info.id} Details={resturant}/>))} 
            </div>

        </div>

    )
}


*Q.when you press the Button, the "ResturantList" variable is updated ,  will the UI re-rendered with top Restaurants? 

    *The answe for this question is NO , because :


        *"The core is reason React cannot Detect changes to regular variables, React does not "watch" or "track" changes to standard variables."*

        Let’s break this down:


            1. React's Declarative Model

                        Declarative:Tells to Do something without proper Instructions or Guidense (Ex: SQL)

                        Imperative: Tells Do something with proper Instructions like step by step explanation (Testcase with step by step)

                React uses a declarative model, meaning:

                    You describe the desired state of the UI.

                    React ensures that the UI stays in sync with its internal state and props.
                
                *React doesn't monitor variables or changes in memory directly because it relies on specific mechanisms like "state and props" to know when something changes.



            *2. How React Tracks Changes
            
                React is designed to detect changes in a controlled way:

                    State and props are the key tools for managing changes in React.
                    
                    React tracks changes by detecting when the state or props have been updated using its internal mechanisms (like the setState or useState hooks).
                
                Regular variables don't interact with React's reactivity system, so changes to them are invisible to React.
    



            *3. What Happens with Regular Variables?

                    Regular variables:

                        *Exist only in the function's scope (in your component function).

                        *Their changes don’t trigger React's rendering mechanism.

                        *React renders the component once, and unless there’s a state or prop change, React assumes nothing has changed.
                    

                    *React re-renders only when:

                        when State is updated

                        Props change because the parent component re-renders.
            


            4. Why React Avoids Watching Variables?
                React doesn’t track all variables for several reasons:

                    1.Performance:
                        Watching every variable would require React to continuously monitor memory, leading to significant overhead. This is inefficient, especially in large applications.

                    2.Predictability:
                        By relying on state and props, React ensures predictable behavior. Changes happen in a controlled, explicit way, making it easier to debug and maintain applications.

                    3.Scoping:
                        Variables in React components are local to their function. Tracking them would mean React has to invade the function's scope, which goes against JavaScript's design principles.

                    4.Declarative Design Philosophy:
                        React's design focuses on the data flow from state/props to the UI. Allowing variables to arbitrarily affect the UI would introduce inconsistency, making the application harder to understand and debug.

            


            5. How Does React Detect Changes in State?
                React detects state changes because:

                    1.State is managed by React through the useState hook or setState.
                    
                    2.When you call setState or update a useState variable, React:
                            Compares the new state with the previous state.
                        
                            If there's a change, React schedules a re-render of the component.
            



            6. Example to Illustrate:

                            const Counter = () => {
                            let count = 0;

                            const increment = () => {
                                count++;
                                console.log("Count:", count); // The variable updates
                            };

                            return (
                                <div>
                                    <p>Count: {count}</p> {/* This won't update */}
                                    <button onClick={increment}>Increment</button>
                                </div>
                            );
                        };
                

                Here’s what happens:

                    1.The increment function updates count, but React doesn’t know or care about this change.
                    
                    2.React doesn’t re-render the component because count is not part of its state system.
                    
                    3.The displayed count in the <p> tag never changes.
        

                State Variable:              (you will get know about state and state system in react furter)

                    import { useState } from "react";

                    const Counter = () => {
                        const [count, setCount] = useState(0);

                        const increment = () => {
                            setCount(count + 1); // React schedules a re-render
                        };

                        return (
                            <div>
                                <p>Count: {count}</p> {/* React updates this */}
                                <button onClick={increment}>Increment</button>
                            </div>
                        );
                    };


                Here’s what happens:

                    Calling setCount updates the state and notifies React.
                    
                    React schedules a re-render and updates the DOM to reflect the new value of count.






            7. Analogy: Why React Tracks State, Not Variables

                    Imagine you’re a teacher managing students’ grades:

                            If students raise their hands and tell you their new grades (like using setState), you’ll update your gradebook.
                            
                            If students just whisper among themselves (like updating a local variable), you won’t know what’s changed.
                    
                React only listens to changes made through the proper system (state/props). Anything outside that system is ignored.
        









Conclustion:
        React cannot detect changes to regular variables because:

                React’s rendering mechanism is explicitly tied to state and props.
                
                Tracking all variables would be inefficient and against React’s design principles.
                
                React focuses on predictable, declarative updates through its internal mechanisms.
        