How Do the Single Responsibility Principle (SRP) and Custom Hooks Contribute to React App Optimization?
        1. Understanding the Single Responsibility Principle (SRP):
                        The Single Responsibility Principle states that a module or function should have one reason to changeâ€”in other words, it should only do one thing. Applying SRP to React components or custom hooks ensures that each component or hook is focused, simple, and easy to maintain.

        2. Optimization Through Custom Hooks:
                        Custom hooks in React encapsulate reusable logic into modular functions. When paired with SRP, custom hooks ensure:

                                                                                                Clean Separation of Concerns: Logic is moved out of components, keeping them focused on rendering.
                                                                                                
                                                                                                Reusability: Repeated logic is written once and reused across multiple components.
                                                                                                
                                                                                                Maintainability: Changes in logic require updates in only one place (the custom hook).
                                                                                                
                                                                                                Performance: Encapsulated hooks reduce redundant re-execution of logic across components, improving performance.
                                                                                                
                                                                                                This type of optimization is called code optimization (focused on maintainability and efficiency) and runtime optimization (improving performance by reducing unnecessary computations or re-renders).




    This type of optimization is called code optimization (focused on maintainability and efficiency) and runtime optimization (improving performance by reducing unnecessary computations or re-renders).





What Happens Before and After Using Custom Hooks?
            
            Before Using Custom Hooks:
                                            1.Duplicated Logic:
                                                    Components often repeat similar logic, leading to redundancy.
                                                    Example: Fetching data in multiple components leads to each component having similar code blocks.
                                            
                                            2.Bloated Components:
                                                    Components handle too much logic (e.g., data fetching, state management, and rendering).
                                            
                                            3.Harder Debugging:
                                                    Tracking down issues becomes challenging because the logic is scattered across multiple components.
                                            
                                            4.Reduced Reusability:
                                                    Developers must rewrite logic for similar use cases instead of reusing it.
            
            
            
            After Using Custom Hooks:

                                            1.Centralized Logic:
                                                            Repeated logic is extracted into reusable custom hooks.
                                            2.Simplified Components:
                                                            Components focus on rendering and delegate stateful logic to hooks.
                                                            
                                            3.Improved Maintainability:
                                                            Updates to logic require changes in the custom hook, not across multiple components.
                                            4.Performance Gains:
                                                            Hooks reduce redundancy and prevent unnecessary computations.










Simple Use Case: Fetching Data
                            Before Custom Hook:
                                                Logic for fetching data is repeated in multiple components.
                                                
                                            -->    function ComponentA() {
                                                    const [data, setData] = useState(null);
                                                    const [loading, setLoading] = useState(true);

                                                    useEffect(() => {
                                                        async function fetchData() {
                                                            const response = await fetch('https://api.example.com/dataA');
                                                            const result = await response.json();
                                                            setData(result);
                                                            setLoading(false);
                                                        }
                                                        fetchData();
                                                    }, []);

                                                    if (loading) return <p>Loading...</p>;
                                                    return <div>DataA: {data.title}</div>;
                                                }




                                            -->    function ComponentB() {
                                                    const [data, setData] = useState(null);
                                                    const [loading, setLoading] = useState(true);

                                                    useEffect(() => {
                                                        async function fetchData() {
                                                            const response = await fetch('https://api.example.com/dataB');
                                                            const result = await response.json();
                                                            setData(result);
                                                            setLoading(false);
                                                        }
                                                        fetchData();
                                                    }, []);

                                                    if (loading) return <p>Loading...</p>;
                                                    return <div>DataB: {data.title}</div>;
                                                }


                                    *Problems:
                                            Logic is repeated across ComponentA and ComponentB.
                                            
                                            Both components are bloated with fetching logic.




                        After Custom Hook:
                                        Extract the logic into a reusable custom hook.
                                        import { useState, useEffect } from 'react';

                                        function useFetchData(url) {
                                            const [data, setData] = useState(null);
                                            const [loading, setLoading] = useState(true);

                                            useEffect(() => {
                                                async function fetchData() {
                                                    const response = await fetch(url);
                                                    const result = await response.json();
                                                    setData(result);
                                                    setLoading(false);
                                                }
                                                fetchData();
                                            }, [url]);

                                            return { data, loading };
                                        }


                                -->        function ComponentA() {
                                            const { data, loading } = useFetchData('https://api.example.com/dataA');
                                            if (loading) return <p>Loading...</p>;
                                            return <div>DataA: {data.title}</div>;
                                        }


                                -->        function ComponentB() {
                                            const { data, loading } = useFetchData('https://api.example.com/dataB');
                                            if (loading) return <p>Loading...</p>;
                                            return <div>DataB: {data.title}</div>;
                                        }
                        
                        Improvements:
                                    Reusable Hook: Logic for fetching data is written once in useFetchData.
                                    
                                    Simplified Components: Components now focus on rendering, not fetching logic.
                                    
                                    Better Maintainability: Changes to fetching logic (e.g., adding error handling) are made in the hook, not in every component.



Conclusion:
            Using custom hooks with the Single Responsibility Principle optimizes React apps by simplifying components, reducing redundancy, and improving maintainability. This approach ensures clean, scalable, and performant applications