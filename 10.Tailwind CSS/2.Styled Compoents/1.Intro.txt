What Are Styled Components?
                        *Styled Components is a "CSS-in-JS Library"(in order to get the functonolity you should import that) that allows you to write CSS directly inside JavaScript files. It lets you style components dynamically and encapsulates styles to prevent conflicts.

                        *It is called Styled Components because it lets you create styled versions of React components by applying CSS styles directly within JavaScript.


Why Were Styled Components Introduced? (The Problems They Solve)
        Before Styled Components, there were several ways to style React components:

                        1.CSS Files
                                    Developers used separate .css files to style components.
                                    
                                    Problem: Global scope‚Äîstyles could override each other unintentionally.
                        
                        
                        2.Inline Styles
                                        Styles were applied using the style attribute in JSX.
                                        
                                        Problem: No pseudo-classes, media queries, or animations support.
                        
                        
                        3.CSS Modules
                                        Allowed scoping of styles per component using .module.css.
                                        
                                        Problem: Still required importing CSS files manually.





The Solution
            Styled Components: 
                            Styled Components solve these problems by: 
                                                                    ‚úî Encapsulating styles within components.
                                                                    
                                                                    ‚úî Dynamically changing styles based on props or state.
                                                                    
                                                                    ‚úî No class name conflicts, since styles are scoped.
                                                                    
                                                                    ‚úî Enhanced readability by keeping styles and components together.














Basic Syntax & Example
                    1Ô∏è‚É£ Creating a Styled Component
                  
                                            import styled from 'styled-components';
                                            
                                            const Button = styled.button`
                                            background-color: blue;
                                            color: white;
                                            padding: 10px 20px;
                                            border: none;
                                            cursor: pointer;
                                            
                                            &:hover {
                                                background-color: darkblue;
                                            }
                                            `;



                                            function App() {
                                            return <Button>Click Me</Button>;
                                            }

                                            export default App;



                                            üîπ What happens here?
                                                                styled.button creates a styled <button> component.
                                                                
                                                                CSS is written inside template literals (`...`).
                                                                
                                                                &:hover applies hover effects dynamically.





        2Ô∏è‚É£ Dynamic Styling with Props

                Dynamic styling means changing styles based on the component's props (properties). Instead of writing multiple CSS classes, Styled Components lets you apply styles conditionally using JavaScript inside the template literal.

                     1.        const Button = styled.button
                                `
                                    background-color: ${(props) => (props.primary ? "blue" : "gray")};
                                    color: white;
                                `;

                                function App() {
                                return (
                                    <>
                                    <Button primary>Primary Button</Button>
                                    <Button>Secondary Button</Button>
                                    </>
                                );
                                }
                        


                        üîç How This Works?
                                            1.styled.button creates a styled <button> component.
                                            
                                            2.Inside the template literal (`...`), background-color is set dynamically:
                                                                                                                        ${(props) => (props.primary ? "blue" : "gray")}

                                                                                                                            *If props.primary exists ‚Üí Background is "blue".
                                                                                                                            
                                                                                                                            *If props.primary is not given ‚Üí Background is "gray".
                                            3.<Button primary> gets a blue background.
                                            
                                            4.<Button> without primary gets a gray background.
            

            Example 2: Changing Font Size & Border Dynamically

                                                const Button = styled.button
                                                `
                                                        font-size :         ${(props) => (props.large ? "20px" : "14px")};
                                                        border    :         ${(props) => (props.outline ? "2px solid black" : "none")};
                                                        padding   :         10px;
                                                `;

                                                        function App() {
                                                                    return (
                                                                        <>
                                                                        <Button large>Large Button</Button>
                                                                        <Button>Small Button</Button>
                                                                        <Button outline>Outlined Button</Button>
                                                                        </>
                                                                    );
                                                                }
                                                        export default App;


                                                üîç How This Works?
                                                                    font-size: If large prop is passed ‚Üí 20px, otherwise 14px.
                                                                    
                                                                    border: If outline prop is present ‚Üí 2px solid black, otherwise no border.
            






            Example 3: Dynamic Colors Based on Theme

                            const Heading = styled.h1
                            `
                                color:              ${(props) => (props.darkMode ? "white" : "black")};
                                background-color:   ${(props) => (props.darkMode ? "black" : "white")};
                                padding:             20px;
                            `;

                            function App() {
                                return (
                                    <>
                                    <Heading darkMode>Dark Mode</Heading>
                                    <Heading>Light Mode</Heading>
                                    </>
                                );
                                }

                            export default App;
                    
                    üîç How This Works?
                            If darkMode is passed ‚Üí White text, black background.
                            
                            If darkMode is not passed ‚Üí Black text, white background.








Real-Life Use Case (E-Commerce Website)
    Imagine an E-Commerce website where product cards are displayed dynamically. 
    
    Before Styled Components:
                    You‚Äôd manage CSS files separately, leading to style conflicts.
                    
                    Making style changes required updating multiple files.
    
    With Styled Components:
                    Each product card has encapsulated styles.
                    
                    Styles change dynamically based on product type.

            

      --->  const ProductCard = styled.div
        `
            background: ${(props) => (props.inStock ? "white" : "#ddd")};
            border: 1px solid gray;
            padding: 20px;
        `;



        --> function Product({ name, inStock }) {
            return <ProductCard inStock={inStock}>{name}</ProductCard>;
            }




        --> export default function App() {
            return (
                <>
                <Product name="Laptop" inStock />
                <Product name="Headphones" inStock={false} />
                </>
            );
            }



    üîπ What‚Äôs happening?
            If the product is in stock, it appears normal.
            
            If not, it grays out automatically.




Summary
        Feature	                                       Before Styled Components	After                   Styled Components

        Style Scope	                                            Global (CSS)	                           Component Scoped

        Dynamic Styling	                                        Hard to implement	                        Easy with props

        Class Name Conflicts	                                Frequent	                                No conflicts

        Code Readability	                                    CSS is separate	                            CSS is inside the component





Why Use Styled Components?
                    ‚úÖ No class name conflicts
                    
                    ‚úÖ Better code organization
                    
                    ‚úÖ Easier dynamic styling
                    
                    ‚úÖ No need for separate CSS files
