What is Optional Chaining?
    Optional Chaining (?.) is a feature in JavaScript that allows you to access deeply nested properties of an object without explicitly checking if each property in the chain exists. If a property in the chain is null or undefined, the expression short-circuits and returns undefined instead of throwing an error.


Purpose of Optional Chaining
    The main purpose of optional chaining is to simplify the process of accessing nested properties in objects and arrays, especially when the structure is uncertain or properties might not exist. Without optional chaining, you'd need verbose checks to avoid runtime errors.


Why is it Called "Optional Chaining"?
    The term "optional" refers to the fact that you are making the access to a property or method optional—it only proceeds if the preceding value exists (is not null or undefined). The "chaining" refers to the ability to chain multiple property accesses in a single expression.




*Basic Syntax
        The syntax for optional chaining is straightforward:
            object?.property
            
            object?.[expression]
            
            object?.method()


    object?.property: Accesses property of object only if object exists.
    
    object?.[expression]: Dynamically accesses a property using expression.
    
    object?.method(): Calls method() only if object exists and the method is a function.




Basic Explanation with Examples
        1.Without Optional Chaining:

            const user = {
                            name: "Alice",
                            address: {
                                city: "New York",
                            },
                            };

            // Check if 'address' and 'city' exist before accessing
            const city = user && user.address && user.address.city;         // "New York"



        2.With Optional Chaining:
            const city = user?.address?.city; // "New York"

        

        *If user or user.address were null or undefined, the result would simply be undefined instead of throwing an error.






*Q.How Optional Chaining Works
        1.Nullish Check (null or undefined):

                Stops further property access if the value is null or undefined.
                
                Returns undefined instead of throwing an error.
        
        
        
        2.No Check for Non-Existent Properties:

                If a property exists but has a value like 0, false, or an empty string (""), optional chaining does not stop—it only stops for null or undefined.









Use Cases
            Easy Level


                    1.Accessing Nested Properties:

                            const user = {
                                            profile: {
                                                username: "susan",
                                            },
                                        };

                                // Safe access with optional chaining
                                const username = user?.profile?.username; // "susan"
                                
                                const email = user?.profile?.email; // undefined
                    

                    2.Accessing Array Elements:

                            const users = [{ name: "Alice" }, null, { name: "Bob" }];

                                // Safely access properties of array element
                                const firstUser = users[0]?.name; // "Alice"
                                
                                const secondUser = users[1]?.name; // undefined


                            **Key Difference Between  i.users?.[1]?.name and ii.users[1]?.name  

                                    i.it evene checks if the users Exists before accesseing second element 

                                    ii. it directly assumes that users is exists and directly  go for second element

            


            Intermediate Level


                    3.Accessing Methods:
                            const obj = {
                                            greet: () => "Hello",
                                        };

                                        // Call method only if it exists
                                        const greeting = obj?.greet?.(); // "Hello"
                                        
                                        const farewell = obj?.farewell?.(); // undefined



                    4.Dynamic Property Access:
                            const key = "username";
                            const user = {
                            username: "Alice",
                            };

                        const value = user?.[key]; // "Alice"



            Advanced Level
                    5.Accessing Deeply Nested APIs:
                        const apiResponse = {
                                data: {
                                    user: {
                                    settings: {
                                        theme: "dark",
                                    },
                                    },
                                },
                                };

                                
                                const theme = apiResponse?.data?.user?.settings?.theme; // "dark"
                                
                                const notifications = apiResponse?.data?.user?.settings?.notifications; // undefined





                    6.Handling Non-Existent Data in REST APIs:


                                    async function fetchData() {
                                    const response = await fetch("https://api.example.com/data");
                                    const data = await response.json();

                                    // Safely access API data
                                    const firstItemName = data?.items?.[0]?.name;
                                    }
                    


                    7.Conditional Rendering in React:

                                            function App({ user }) {
                                            return <h1>{user?.profile?.name || "Guest"}</h1>;
                                            }







**FallBack Default value Return: 


        jsonData?.data?.cards?.[1]?.card?.card?.gridElements?.infoWithStyle?.restaurants || [];

            Q. what is this "|| []" at the end of chaning ? 

                     we are setting one Default value as Returing if the chaining is returned undefined . 

                            It is like ------> result = value1 || value2;


                        "chaining logic" or return "empty array"











Key Considerations
            1.Works Only for null or undefined: Optional chaining does not prevent errors caused by invalid property access on non-object values like numbers or strings.

                        const str = "hello";
                        console.log(str?.property); // Error: Cannot read property 'property' of string
            
            
            2.Avoid Overuse:

                Optional chaining should not replace thorough data validation.
                
                Overuse can lead to code that is hard to debug.